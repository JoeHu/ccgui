$#include "CCGUIToLua.h"

class TouchNode : public CCNode,public CCTargetedTouchDelegate
{
	void setName(std::string name);
	std::string getName();
    bool isTouchable();
    void setTouchable(bool enable);
}

class Widget : public TouchNode
{
	Widget * getParentWidget();
	Widget * get(const char * name);
	void touchBegin(LUA_FUNCTION handle);
	void touchMove(LUA_FUNCTION handle);
	void touchEnd(LUA_FUNCTION handle);
	void touchCancel(LUA_FUNCTION handle);
    bool isFrontable(); 
    void enableFront(bool enable);
    static Widget * create(std::string name);
    virtual void setPosition (const CCPoint &position);
    virtual void setContentSize(const CCSize &contentSize);
    bool isChildOf(Widget * parent);

	void replaceWidget(Widget * oldWidget, Widget * newWidget);
    virtual void addWidget(Widget * child);
    virtual void removeWidget(Widget* child);
	virtual void clearWidgets();
}

Widget * widget_manager_init(CCNode * node, int zorder);
void widget_manager_release();

class ImageBox:public Widget
{
	static ImageBox * create(std::string name);
	virtual void setContentSize(const CCSize &contentSize);
	void setBackSprite(CCNode * sprite);
	CCNode * getBackSprite();
}

class CCBWidget: public Widget
{
	static CCBWidget * create(std::string name, const char * filename);
}

class ScrollView:public Widget
{
	virtual void setContentSize(const CCSize &contentSize);
	Widget * getCanvas();
	void setCanvas(Widget * canvas);
	void setViewOffset(CCPoint point);
	CCPoint getViewOffset();
	void	setVisibleVScroll(bool _value);
	bool	isVisibleVScroll();
	void	setVisibleHScroll(bool _value);
	bool	isVisibleHScroll();
}

class ItemBox : public ScrollView
{
	static ItemBox * create(std::string name);
	virtual void setContentSize(const CCSize &contentSize);
	void addItem(Widget * item);
	void removeItem(int index);
	void clearItems();
	void setCaption(std::string item);
}

class TextBox:public Widget
{
	void setText(const char * text);
	const char* getText();
	void setFontName (const char* fontName);
	const char*		getFontName ();
	void setFontSize(int _value);
	int	getFontSize();
	void setTextAlign(CCTextAlignment align);
	CCTextAlignment	getTextAlign();
	void setTextVAlign(CCVerticalTextAlignment align);
	CCVerticalTextAlignment getTextVAlign();
	void setTextColor(const ccColor3B &_value);
	const ccColor3B getTextColour();
}

class EditBox : public Widget
{
	static EditBox * create(std::string name);
	static EditBox * create(std::string name, CCPoint position, CCSize contentSize);
}


